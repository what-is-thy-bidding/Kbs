DESCRIBE products;
update products SET ProbabilitySem=0.1 WHERE ProbabilitySem IS NULL;

UPDATE products set ProbabilitySem=rand()
SELECT ProbabilitySem FROM products;
ALTER table stocks DROP COLUMN BagSem;
ALTER table stocks DROP COLUMN CertainitySem;

ALTER table products DROP CertainitySem, DROP ProbabilitySem, DROP BagSem, DROP StandardSem, DROP PolynomialSem;
ALTER table stocks DROP CertainitySem, DROP ProbabilitySem, DROP BagSem, DROP StandardSem, DROP PolynomialSem;
SELECT * FROM products;
SELECT * FROM stocks;

UPDATE products SET BagSem =CAST(RAND()*10 AS UNSIGNED);
SELECT * FROM products;



update products JOIN(SELECT @rank:=0) r SET PolynomialSem=CONCACT ("a",CAST(@rank as Varchar(10))) :=@rank+1;
select * from products;

/* Concatenate 2 columns */

drop table tbl;
create table tbl(ID bigint not null primary key auto_increment,
				name varchar(100)) auto_increment=1;

insert into tbl (name) values ('a');
insert into tbl (name) values ('a');
select concat('S', id) as id, name from tbl;

select* from tbl;


POLYNOMIAL ANNOTATIONS INPUTTED

/*ALTER TABLE products ADD ID INT ;*/
/*SET @rank=0;
update products set ID=@rank:=@rank+1;*/
/*ALTER TABLE products ADD Anno VARCHAR(10);*/
/*UPDATE products SET Anno="A";*/
/*ALTER TABLE products ADD PolynomialSem VARCHAR(50);*/
/*UPDATE products set PolynomialSem=CONCAT(ID,ANNO);
ALTER TABLE products DROP ID,DROP ANNO;
alter table products DROP PolynomialSem;
alter table products drop PolynomialSem, DROP ID,DROP ANNO;
select * from stocks;*/

/*This is the sql query to add the bag sematics of 2 tables and then save the table*/

SELECT products.product_name,
stocks.store_id,
stocks.quantity,
(stocks.BagSem+products.BagSem)AS BagSem
FROM products, stocks
WHERE products.product_id=stocks.product_id


Input SELECT Parameters  :product_name,product_id,stocks.store_id
Input FROM Parameters :products,stocks
Input WHERE Condition : products.product_id=stocks.product_id AND product_name="AKSHAT BISHT"



Database:

CREATE TABLE TEST(
name varchar(255),
position varchar(255),
city varchar(255),
classification varchar(255),
prob float);
INSERT INTO TEST VALUES("John"     ,"Director"    ,"New York"   ,"unclassified",0.5);
INSERT INTO TEST VALUES("Paul"     ,"Janitor"     ,"New York"   ,"restricted"  ,0.7);
INSERT INTO TEST VALUES("Dave"     ,"Analyst"     ,"Paris"      ,"confidential",0.3);
INSERT INTO TEST VALUES("Ellen"    ,"Field agent" ,"Berlin"     ,"secret"      ,0.2);
INSERT INTO TEST VALUES("Magdalen" ,"Double Agent","Paris"      ,"top secret"  ,1.0);
INSERT INTO TEST VALUES("Nancy"    ,"HR Director" ,"Paris"      ,"restricted"  ,0.8);
INSERT INTO TEST VALUES("Susan"    ,"Analyst"     ,"Berlin"     ,"secret"      ,0.2);


Probablity Semantics Projection Funtion
#The Algorithm
#1.Copy all the required columns into a new table
CREATE TABLE Copy SELECT city,prob FROM TEST;
#2.UPDATE Copy by subtracting 1 with all probabilities
UPDATE Copy SET prob=1-prob;
#3.Create a LogCopy that will have the log values of all probabilities
CREATE TABLE LogCopy
	SELECT city, SUM(LnProb) AS prob FROM(
		SELECT city, 
		CASE WHEN prob=0 THEN 4294967295
		ELSE LN(prob)
		END AS LnProb FROM Copy
	) AS prob GROUP BY city;
#4.UPDATE LogCopy and set every values>1 as 0
UPDATE LogCopy SET prob=0 WHERE prob>1;
#5.CREATE a final RESULT Table which has the exponent values of the Log values
CREATE TABLE RESULT 
	SELECT city, EXP(prob) AS prob FROM LogCopy ;
#6. UPDATE RESULT table by subtracting from 1 execpt if the values are already 1 
UPDATE RESULT SET prob=1-prob WHERE NOT prob=1;
SELECT * FROM RESULT;
#7.DROP the Remaining tables
DROP TABLE Copy;
DROP TABLE LogCopy;
DROP TABLE RESULT;


Polynomial Semantics JOIN Function

SELECT * FROM PRODUCTS_product_id_product_name;
SELECT * FROM STOCKS_product_id_store_id;

#With 1 common column for Natural Join
SELECT PRODUCTS_product_id_product_name.product_id,product_name,store_id,
CONCAT('(',PRODUCTS_product_id_product_name.PolynomialSem,'*', STOCKS_product_id_store_id.PolynomialSem,')')AS PolynomialSem 
FROM PRODUCTS_product_id_product_name INNER JOIN STOCKS_product_id_store_id 
ON PRODUCTS_product_id_product_name.product_id=STOCKS_product_id_store_id.product_id;

#With 2 common columns for Natural Join
SELECT PRODUCTS_product_id_product_name.product_id, PRODUCTS_product_id_product_name.PolynomialSem, product_name, store_id,  CONCAT('(',PRODUCTS_product_id_product_name.PolynomialSem,'*',STOCKS_product_id_store_id.PolynomialSem,')') AS PolynomialSem 
FROM PRODUCTS_product_id_product_name INNER JOIN STOCKS_product_id_store_id 
ON PRODUCTS_product_id_product_name.product_id=STOCKS_product_id_store_id.product_id AND PRODUCTS_product_id_product_name.PolynomialSem=STOCKS_product_id_store_id.PolynomialSem ;







#---------------------------------------------------------------------------------------------------------

#ALTER TABLE ordertxt DROP COLUMN ProbabilitySem,DROP COLUMN CertaintySem;
#ALTER TABLE products DROP COLUMN ProbabilitySem,DROP COLUMN CertaintySem;
#ALTER TABLE stocks DROP COLUMN ProbabilitySem,DROP COLUMN CertaintySem;
#ALTER TABLE staff DROP COLUMN ProbabilitySem,DROP COLUMN CertaintySem;
#ALTER TABLE TEST DROP COLUMN ProbabilitySem,DROP COLUMN CertaintySem;

#---------------------------PROJECTION-----------------------------------------

#Bag Sematics
/*
SELECT store_id,SUM(BagSem)AS BagSem,
GROUP_CONCAT(PolynomialSem SEPARATOR'+') AS PolynomialSem FROM stocks 
GROUP BY store_id;
*/

#Probability Semantics
/*
#The Algorithm
#1.Copy all the required columns into a new table
CREATE TABLE Copy SELECT city,prob FROM TEST;
#2.UPDATE Copy by subtracting 1 with all probabilities
UPDATE Copy SET prob=1-prob;
#3.Create a LogCopy that will have the log values of all probabilities
CREATE TABLE LogCopy
	SELECT city, SUM(LnProb) AS prob FROM(
		SELECT city, 
		CASE WHEN prob=0 THEN 4294967295
		ELSE LN(prob)
		END AS LnProb FROM Copy
	) AS prob GROUP BY city;
#4.UPDATE LogCopy and set every values>1 as 0
UPDATE LogCopy SET prob=0 WHERE prob>1;
#5.CREATE a final RESULT Table which has the exponent values of the Log values
CREATE TABLE RESULT 
	SELECT city, EXP(prob) AS prob FROM LogCopy ;
#6. UPDATE RESULT table by subtracting from 1 execpt if the values are already 1 
#7. UPDATE RESULT SET prob=1-prob WHERE NOT prob=1;
SELECT * FROM RESULT;
#7.DROP the Remaining tables
DROP TABLE Copy;
DROP TABLE LogCopy;
DROP TABLE RESULT;
*/

#Certainty Semantics
/*
SELECT product_id, MAX(CertaintySem) FROM
(
	SELECT product_id,CertaintySem FROM PRODUCTS_product_id 
    UNION ALL 
    SELECT product_id,CertaintySem FROM STOCKS_product_id 
    ORDER BY product_id,CertaintySem
)AS T GROUP BY product_id;
*/

#---------------------------#JOIN----------------------------------------------


/*
Find all the common attributes between the 2 joining tables
Perform a JOIN on the the 1st one between them
If there are more than 1 common columns between them then,
Compare the common attributes with the projected selected/projected functions
*/

#Tables

/*
SELECT* FROM PRODUCTS_product_id;
SELECT* FROM STOCKS_product_id;
*/


#Bag Semantics
/*
SELECT PRODUCTS_product_id_product_name.product_id,product_name,store_id,PRODUCTS_product_id_product_name.BagSem * STOCKS_product_id_store_id.BagSem AS BagSem 
FROM PRODUCTS_product_id_product_name INNER JOIN STOCKS_product_id_store_id ON PRODUCTS_product_id_product_name.product_id=STOCKS_product_id_store_id.product_id;
*/
/*
SELECT * FROM STOCKS_product_id_store_id;

SELECT PRODUCTS_product_id_product_name.product_id, product_name, store_id, 
PRODUCTS_product_id_product_name.BagSem* STOCKS_product_id_store_id.BagSem AS BagSem 
FROM PRODUCTS_product_id_product_name,STOCKS_product_id_store_id 
WHERE PRODUCTS_product_id_product_name.product_id=STOCKS_product_id_store_id.product_id ;

SELECT PRODUCTS_product_id_product_name.product_id, product_name, store_id,  PRODUCTS_product_id_product_name.BagSem* STOCKS_product_id_store_id.BagSem AS BagSem FROM PRODUCTS_product_id_product_name,STOCKS_product_id_store_id WHERE PRODUCTS_product_id_product_name.product_id=STOCKS_product_id_store_id.product_id ;
*/

#Polynomial Semantics
/*
SELECT PRODUCTS_product_id_product_name.product_id,product_name,store_id,STOCKS_product_id_store_id.PolynomialSem,PRODUCTS_product_id_store_id.PolynomialSem 
FROM PRODUCTS_product_id_product_name INNER JOIN STOCKS_product_id_store_id 
ON STOCKS_product_id_store_id.product_id=PRODUCTS_product_id_store_id.product_id;*/
/*
SELECT PRODUCTS_product_id.product_id,
PRODUCTS_product_id.ProbabilitySem * STOCKS_product_id.ProbabilitySem AS ProbabilitySem
FROM PRODUCTS_product_id INNER JOIN STOCKS_product_id 
ON PRODUCTS_product_id.product_id=STOCKS_product_id.product_id;*/ 

#Probabilty Semantics
/*
SELECT PRODUCTS_product_id.product_id,  PRODUCTS_product_id.ProbabilitySem * STOCKS_product_id.ProbabilitySem AS ProbabilitySem FROM PRODUCTS_product_id INNER JOIN STOCKS_product_id ON PRODUCTS_product_id.product_id=STOCKS_product_id.product_id ;
SELECT* FROM PRODUCTS_product_id_JOIN_STOCKS_product_id; 
*/

#----------------------------#UNION---------------------------------------------

#Tables
 
#BagSem
/*
DROP TABLE PRODUCTS_product_id_UNION_STOCKS_product_id;
CREATE TABLE PRODUCTS_product_id_UNION_STOCKS_product_id 
SELECT product_id, SUM(BagSem) AS BagSem FROM ( 
SELECT product_id, BagSem FROM PRODUCTS_product_id 
UNION ALL 
SELECT product_id, BagSem FROM STOCKS_product_id ORDER BY product_id , BagSem)AS T 
GROUP BY product_id;

SELECT * FROM PRODUCTS_product_id_UNION_STOCKS_product_id;
*/

#PolynomialSem

/*
SELECT * FROM STOCKS_product_id;
*/
/*
SELECT product_id,GROUP_CONCAT(PolynomialSem separator'+') FROM(
	SELECT PRODUCTS_product_id.product_id,PolynomialSem FROM PRODUCTS_product_id
	UNION ALL
	SELECT STOCKS_product_id.product_id,PolynomialSem FROM STOCKS_product_id
	ORDER BY product_id,PolynomialSem
)AS T
GROUP BY product_id;
*/
/*
CREATE TABLE IF NOT EXISTS PRODUCTS_product_id_UNION_STOCKS_product_id
	SELECT product_id,CONCAT('(',PolynomialSem,')') AS PolynomialSem FROM (
		SELECT product_id , GROUP_CONCAT(PolynomialSem SEPARATOR '+') AS PolynomialSem FROM( 
		SELECT product_id, PolynomialSem FROM PRODUCTS_product_id 
		UNION ALL SELECT 
		product_id,PolynomialSem FROM STOCKS_product_id ORDER BY product_id,PolynomialSem)AS T 
		GROUP BY product_id 
	)AS T1 ;*/

/*
SELECT*FROM PRODUCTS_product_id_UNION_STOCKS_product_id;
*/


#ProbabiltySem

/*
#Unioning all both the tables
CREATE TABLE Copy 
SELECT product_id, ProbabilitySem FROM PRODUCTS_product_id 
UNION ALL 
SELECT product_id, ProbabilitySem FROM STOCKS_product_id ORDER BY product_id,ProbabilitySem;

SELECT * FROM Copy;
UPDATE Copy SET ProbabilitySem=ROUND(1-ProbabilitySem,2);
*/

/*
CREATE TABLE IF NOT EXISTS LogCopy SELECT product_id,SUM(ROUND(LnProb,2)) AS ProbabilitySem FROM(
SELECT product_id, CASE WHEN ProbabilitySem=0 THEN 4294967295 ELSE LN(ProbabilitySem)END AS LnProb 
FROM Copy
)AS ProbabilitySem GROUP BY product_id;*/

/*
#UPDATE LogCopy SET ProbabilitySem=0 WHERE ProbabilitySem>1;

#SELECT * FROM LogCopy;

#CREATE TABLE IF NOT EXISTS RESULT SELECT product_id , ROUND(EXP(ROUND(ProbabilitySem,2)),2) AS ProbabilitySem FROM LogCopy;

#SELECT * FROM RESULT;

#UPDATE RESULT SET ProbabilitySem=ROUND(1-ProbabilitySem ,2 )WHERE NOT ProbabilitySem=1;

#SELECT * FROM RESULT;

#RENAME TABLE RESULT TO PRODUCTS_product_id_UNION_STOCKS_product_id;
*/
/*
SELECT * FROM PRODUCTS_product_id;
SELECT * FROM STOCKS_product_id;
SELECT * FROM PRODUCTS_product_id_UNION_STOCKS_product_id;
*/

select* FROM Table1;
SELECT * FROM Table2;
SELECT * FROM Table3;
#SELECT (ROUND(Table1.CertaintySem*Table2.CertaintySem,2)) AS CertaintySem FROM Table1,Table2;
