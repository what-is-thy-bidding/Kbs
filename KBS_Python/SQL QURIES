DESCRIBE products;
update products SET ProbabilitySem=0.1 WHERE ProbabilitySem IS NULL;

UPDATE products set ProbabilitySem=rand()
SELECT ProbabilitySem FROM products;
ALTER table stocks DROP COLUMN BagSem;
ALTER table stocks DROP COLUMN CertainitySem;

ALTER table products DROP CertainitySem, DROP ProbabilitySem, DROP BagSem, DROP StandardSem, DROP PolynomialSem;
ALTER table stocks DROP CertainitySem, DROP ProbabilitySem, DROP BagSem, DROP StandardSem, DROP PolynomialSem;
SELECT * FROM products;
SELECT * FROM stocks;

UPDATE products SET BagSem =CAST(RAND()*10 AS UNSIGNED);
SELECT * FROM products;



update products JOIN(SELECT @rank:=0) r SET PolynomialSem=CONCACT ("a",CAST(@rank as Varchar(10))) :=@rank+1;
select * from products;

/* Concatenate 2 columns */

drop table tbl;
create table tbl(ID bigint not null primary key auto_increment,
				name varchar(100)) auto_increment=1;

insert into tbl (name) values ('a');
insert into tbl (name) values ('a');
select concat('S', id) as id, name from tbl;

select* from tbl;


POLYNOMIAL ANNOTATIONS INPUTTED

/*ALTER TABLE products ADD ID INT ;*/
/*SET @rank=0;
update products set ID=@rank:=@rank+1;*/
/*ALTER TABLE products ADD Anno VARCHAR(10);*/
/*UPDATE products SET Anno="A";*/
/*ALTER TABLE products ADD PolynomialSem VARCHAR(50);*/
/*UPDATE products set PolynomialSem=CONCAT(ID,ANNO);
ALTER TABLE products DROP ID,DROP ANNO;
alter table products DROP PolynomialSem;
alter table products drop PolynomialSem, DROP ID,DROP ANNO;
select * from stocks;*/

/*This is the sql query to add the bag sematics of 2 tables and then save the table*/

SELECT products.product_name,
stocks.store_id,
stocks.quantity,
(stocks.BagSem+products.BagSem)AS BagSem
FROM products, stocks
WHERE products.product_id=stocks.product_id


Input SELECT Parameters  :product_name,product_id,stocks.store_id
Input FROM Parameters :products,stocks
Input WHERE Condition : products.product_id=stocks.product_id AND product_name="AKSHAT BISHT"



Database:

CREATE TABLE TEST(
name varchar(255),
position varchar(255),
city varchar(255),
classification varchar(255),
prob float);
INSERT INTO TEST VALUES("John"     ,"Director"    ,"New York"   ,"unclassified",0.5);
INSERT INTO TEST VALUES("Paul"     ,"Janitor"     ,"New York"   ,"restricted"  ,0.7);
INSERT INTO TEST VALUES("Dave"     ,"Analyst"     ,"Paris"      ,"confidential",0.3);
INSERT INTO TEST VALUES("Ellen"    ,"Field agent" ,"Berlin"     ,"secret"      ,0.2);
INSERT INTO TEST VALUES("Magdalen" ,"Double Agent","Paris"      ,"top secret"  ,1.0);
INSERT INTO TEST VALUES("Nancy"    ,"HR Director" ,"Paris"      ,"restricted"  ,0.8);
INSERT INTO TEST VALUES("Susan"    ,"Analyst"     ,"Berlin"     ,"secret"      ,0.2);


Probablity Semantics Projection Funtion
#The Algorithm
#1.Copy all the required columns into a new table
CREATE TABLE Copy SELECT city,prob FROM TEST;
#2.UPDATE Copy by subtracting 1 with all probabilities
UPDATE Copy SET prob=1-prob;
#3.Create a LogCopy that will have the log values of all probabilities
CREATE TABLE LogCopy
	SELECT city, SUM(LnProb) AS prob FROM(
		SELECT city, 
		CASE WHEN prob=0 THEN 4294967295
		ELSE LN(prob)
		END AS LnProb FROM Copy
	) AS prob GROUP BY city;
#4.UPDATE LogCopy and set every values>1 as 0
UPDATE LogCopy SET prob=0 WHERE prob>1;
#5.CREATE a final RESULT Table which has the exponent values of the Log values
CREATE TABLE RESULT 
	SELECT city, EXP(prob) AS prob FROM LogCopy ;
#6. UPDATE RESULT table by subtracting from 1 execpt if the values are already 1 
UPDATE RESULT SET prob=1-prob WHERE NOT prob=1;
SELECT * FROM RESULT;
#7.DROP the Remaining tables
DROP TABLE Copy;
DROP TABLE LogCopy;
DROP TABLE RESULT;


Polynomial Semantics JOIN Function

SELECT * FROM PRODUCTS_product_id_product_name;
SELECT * FROM STOCKS_product_id_store_id;

#With 1 common column for Natural Join
SELECT PRODUCTS_product_id_product_name.product_id,product_name,store_id,
CONCAT('(',PRODUCTS_product_id_product_name.PolynomialSem,'*', STOCKS_product_id_store_id.PolynomialSem,')')AS PolynomialSem 
FROM PRODUCTS_product_id_product_name INNER JOIN STOCKS_product_id_store_id 
ON PRODUCTS_product_id_product_name.product_id=STOCKS_product_id_store_id.product_id;

#With 2 common columns for Natural Join
SELECT PRODUCTS_product_id_product_name.product_id, PRODUCTS_product_id_product_name.PolynomialSem, product_name, store_id,  CONCAT('(',PRODUCTS_product_id_product_name.PolynomialSem,'*',STOCKS_product_id_store_id.PolynomialSem,')') AS PolynomialSem 
FROM PRODUCTS_product_id_product_name INNER JOIN STOCKS_product_id_store_id 
ON PRODUCTS_product_id_product_name.product_id=STOCKS_product_id_store_id.product_id AND PRODUCTS_product_id_product_name.PolynomialSem=STOCKS_product_id_store_id.PolynomialSem ;

